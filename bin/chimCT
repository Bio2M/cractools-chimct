#! /usr/bin/perl

# ABSTRACT: Extract, format, classify and annote chimeras identified by CRAC.
# PODNAME: chimCT

# Define version for Getopt::Long auto_version option
$main::VERSION = $CracTools::ChimCT::VERSION;

=head1 SYNOPSIS

chimCT -g file.gff -s file.sam -n sample_name > output.csv

=head1 DESCRIPTION

The chimera pipeline is a tool for both annotating and formating chimera
produced by CRAC software as well as computing a score of beauty for each
chimera and sort them using this criteria.

=cut

use strict;
use warnings;

use Pod::Usage;   # Printing pod documentation in terminal
use Getopt::Long qw(:config auto_version); # Get options
use Carp;         # Print warnings and die

use CracTools::Output;
use CracTools::Config;
use CracTools::SAMReader;
use CracTools::ChimCT;
use CracTools::ChimCT::Const;
use CracTools::ChimCT::Structure;
use CracTools::ChimCT::OverlapStructure;
use CracTools::ChimCT::Analyzer::Annotation;
use CracTools::ChimCT::Analyzer::GSNAPMapping;
use CracTools::ChimCT::Analyzer::StringentTests;
use CracTools::ChimCT::Analyzer::PairedEndChimeras;
use CracTools::ChimCT::Analyzer::FusionDistance;
use CracTools::ChimCT::Analyzer::PrimersDesign;
use CracTools::ChimCT::Analyzer::Read;
use CracTools::ChimCT::Analyzer::CracScore;
use CracTools::ChimCT::Analyzer::ChimScore;

=head1 OPTIONS

=head2 General

  --help                  Print this help
  --man                   Open man page
  --version               Print chimCT version number

=head2 Mandatory arguments

  -g,--gff=file.gff       Specify GFF3 file to perform annotation with. (or declare ANNOTATION_GFF in conf file)
  -s,--sam=file.sam       Specify SAM file used to extract chimeras.
  -n,--sample=name        Specify Sample name

=head2 Optionnal arguments

  --stranded              Make use of stranded information to output chimeras in the right orientation. Stranded PE reads are interpreted as reverse-forward reads.
  --keep-ig               Keep chimeras that correspond to fusions IG genes.
  --est                   Specify GFF3 file with EST annotations. These annotations will be used if we don't find any matching annotation in the --gff annotation file.
  --verify-splice         Verify splices called by CRAC using the GFF3 annotation and convert them into chimera if needed.
  --tmp-dir               Specify a location were the temporary files (like GSNAP mapping files) should be kept

=head2 Output : files & formats

  --detailed-sam          Print the p_support and the p_loc profiles for the selected read.
  --primers               Prints the sequence of concatenated paired-end reads with junction position highlighted for easier primers design.
  --summary=summary.txt   Specify file to print summary stats about the chimeraPipeline in a separate output file.
  --spanning-reads=file   Specify basename to output chimeric spanning reads (PE and single) is fasta format (the fasta extension is automatically added to the end of the filename.

=head2 Analyzer-specific options

  --gsnap-softclip-threshold=Integer  Minimum number of nucleotides that have to be mapped on both sides of the breakpoint gave by CRAC in order to consider a chimera as "MAPPED" (DEFAULT 15)

=head2 Configuration

  --gsnap-exe                 Specify Gsnap exe file
  --gsnap-genome-directory    Specify GSNAP genome directory
  --gsnap-genome-name         GSNAP genome database
  --gsnap-nb-threads=Integer  Number of threads used to run GSNAP (DEFAULT 4)
  --keep-gsnap-output         Keep GSNAP output mapping files an print a link on STDERR to reach them

=cut

#  --patch                Specify a file where to generate a patch with modified CRAC's SAM extended fields.

my ($man,$help,$version);
my ($config_file,$gff_file,$est_file,$sam_file,$paired_end_chimeras_file,$summary_file,$new_splices_file,$ig_file,$patch_file,$spanning_reads_file); # Files
my ($is_stranded,$detailed_sam,$sample_name,$keep_ig,$primers,$verify_splice,$gsnap_softclip_threshold,$keep_gsnap_output,$tmp_dir); # Options
my ($max_paired_overlap_dist);
my ($GSNAP_EXE,$GSNAP_GENOME_DIRECTORY,$GSNAP_GENOME_NAME,$GSNAP_NB_THREADS); # GSNAP conf var

# Copy arguments before extring them
my @ARGV_copy = @ARGV;

#Default value

GetOptions( "stranded"                    => \$is_stranded,
            "n|sample=s"                  => \$sample_name,
            "g|gff=s"                     => \$gff_file,
            "est=s"                       => \$est_file,
            "s|sam=s"                     => \$sam_file,
            "conf=s"                      => \$config_file,
            "detailed-sam"                => \$detailed_sam,
            "primers"                     => \$primers,
            "keep-ig"                     => \$keep_ig,
            "verify-splice"               => \$verify_splice,
            "gsnap_softclip_threshold=i"  => \$gsnap_softclip_threshold,
            "patch=s"                     => \$patch_file,
            "paired-end-chimeras=s"       => \$paired_end_chimeras_file,
            "ig=s"                        => \$ig_file,
            "new-splices=s"               => \$new_splices_file,
            "summary=s"                   => \$summary_file,
            "spanning-reads=s"            => \$spanning_reads_file,
            "gsnap-exe=s"                 => \$GSNAP_EXE,
            "gsnap-genome-directory=s"    => \$GSNAP_GENOME_DIRECTORY,
            "gsnap-genome-name=s"         => \$GSNAP_GENOME_NAME,
            "gsnap-nb-threads=i"          => \$GSNAP_NB_THREADS,
            "keep-gsnap-output"           => \$keep_gsnap_output,
            "tmp-dir=s"                   => \$tmp_dir,
            "man"                         => \$man,
            "help"                        => \$help,
            "version"                     => \$version,
        ) or pod2usage(-verbose => 1);

if($version) {
  print "chimCT version $CracTools::ChimCT::VERSION\n";
  exit 0;
}

pod2usage(-verbose => 1)  if ($help);
pod2usage(-verbose => 2)  if ($man);

# Open configuration file
CracTools::Config::LoadConfig($config_file);

$gff_file = CracTools::Config::getConfVar('ANNOTATION_GFF') unless defined $gff_file;

# Check mandatory arguments
if(!defined $gff_file || !defined $sam_file || !defined $sample_name) {
  print STDERR "Missing mandatory argument(s): ";
  print STDERR "gff_file " unless defined $gff_file;
  print STDERR "sam_file " unless defined $sam_file;
  print STDERR "sample_name " unless defined $sample_name;
  print STDERR "\n";
  pod2usage(-verbose => 1);
}

# Create a sam reader object to parse crac command line arguments
my $sam_reader = CracTools::SAMReader->new($sam_file);

# Get stranded option from crac command line arguments
if(!defined $is_stranded && $sam_reader->hasCracOption('stranded')) {
  $is_stranded = 1;
  print STDERR "Option --stranded activated (found in CRAC command line arguments)\n";
}

$tmp_dir = CracTools::Config::getConfVar('TMP_DIR') unless defined $tmp_dir;

# Get Gsnap Conf from CracTools config file unless they are
# already defined as command line arguments
$GSNAP_EXE = CracTools::Config::getConfVar('GSNAP_EXE') unless defined $GSNAP_EXE;
$GSNAP_GENOME_DIRECTORY = CracTools::Config::getConfVar('GSNAP_GENOME_DIRECTORY') unless defined $GSNAP_GENOME_DIRECTORY;
$GSNAP_GENOME_NAME = CracTools::Config::getConfVar('GSNAP_GENOME_NAME') unless defined $GSNAP_GENOME_NAME;
$GSNAP_NB_THREADS = CracTools::Config::getConfVar('GSNAP_NB_THREADS') unless defined $GSNAP_NB_THREADS;

=head1 INPUT (SAM) FILE

Chimeras identified by CRAC are loaded from the SAM file in argument.
If option C<--stranded> is specified, PE reads will be treat as "reverse-forward".
Chimeras identified on the first read of a pair will be reversed.

=cut

print STDERR "> Loading chimeras from SAM file\n";
my $chimera_struct = CracTools::ChimCT::Structure->new();
my $false_chimera_struct = CracTools::ChimCT::Structure->new();
my $paired_chimera_overlap_struct = CracTools::ChimCT::OverlapStructure->new(is_stranded => $is_stranded);
my $annot_analyzer = CracTools::ChimCT::Analyzer::Annotation->new(
  chimera_struct => $chimera_struct,
  gff_file => $gff_file,
  keep_ig => $keep_ig,
  est_file => $est_file,
  is_stranded => $is_stranded,
);


# Correct the orientation of the chimera based on the "is_stranded option"
# Force Annot_analyzer to annotate the chimera
sub _processChimera {

  my ($chimera,$read,$sam_line) = @_;
  # We introduce a boolean for reversing the read in order to do it only if the we are considering this chimera
  # (this will not be the case of a splice for example) and reversig a read is time consuming because we
  # reverse complemente the whole sequence
  my $reverse_read = 0;

  if($is_stranded && $sam_line->isFlagged($CracTools::SAMReader::SAMline::flags{FIRST_SEGMENT})) {
    $reverse_read = 1;
    $chimera->reverseChimera();
  } elsif (!$is_stranded && defined $chimera_struct->getChimera($chimera->getReverseKey)) {
    $reverse_read = 1;
    $chimera->reverseChimera();
  }

  my $existing_chimera = $chimera_struct->getChimera($chimera->getKey());
  if(defined $existing_chimera) {
    $read->reverseRead() if $reverse_read;
    $existing_chimera->addRead($read);
  } elsif(!defined $false_chimera_struct->getChimera($chimera->getKey)) {
    $read->reverseRead() if $reverse_read;
    $chimera->addRead($read);
    $chimera_struct->addChimera($chimera);
    # We force the annot analyzer to annotate the newly added chimera
    $annot_analyzer->_initChimera($chimera);
    # If no annotation is available that means that this chimeras has been
    # removed from the chimer_struct due to its annotation.
    # We add the coordinates to the false positive chimera_struct in order to
    # keep the information about this false positive if we found a other read that
    # has the same chimeric coordinates
    if(!defined $annot_analyzer->getAnnotation($chimera)) {
      $false_chimera_struct->addChimera($chimera);
    }
  }
}

#my $sam_it = $sam_reader->iteratorFile('IGNORE_HEADERS');
my $nb_reads_import = 0;
my $nb_chimeras_added_to_the_structure = 0;

{
# Loop over each line of the SAM file
#while (my ($line,$line_number) = $sam_it->()) {
  my $sam_it = $sam_reader->iterator();
  while (my $sam_line = $sam_it->()) {
    $nb_reads_import++;

    # Loop over each chimera of the current SAM line
    foreach my $chim_event (@{$sam_line->events('chimera')}) {

      # Get chimeras positions
      my ($chr1,$pos1,$strand1) = @{$chim_event->{loc1}}{'chr','pos','strand'};
      my ($chr2,$pos2,$strand2) = @{$chim_event->{loc2}}{'chr','pos','strand'};
      my $chimera = CracTools::ChimCT::Chimera->new($chr1,$pos1,$strand1,$chr2,$pos2,$strand2);
      my $seq = $sam_line->seq;
      my $read = CracTools::ChimCT::Read->new(id => $sam_line->qname,
                                                       seq => $sam_line->getOriginalSeq, 
                                                       pos_junction => $chim_event->{pos}, 
                                                       sam_line => $sam_line, 
                                                       chimera_event => $chim_event);

      _processChimera($chimera,$read,$sam_line);
    }
    
    # If "verify-splice" option is activated we also add Junction as chimeras
    # that will be verified and discarded using the annotation process
    if($verify_splice) {
      foreach my $splice (@{$sam_line->events('Junction')}) {

        # Get chimeras positions
        my ($chr,$pos,$strand) = @{$splice->{loc}}{'chr','pos','strand'};

        my ($pos1,$pos2);
        if($strand == -1) {
          $pos1 = $pos+$splice->{gap}+1;
          $pos2 = $pos;
        } else {
          $pos1 = $pos;
          $pos2 = $pos+$splice->{gap}+1;
        }

        my $chimera = CracTools::ChimCT::Chimera->new($chr,$pos1,$strand,$chr,$pos2,$strand);
        my $seq = $sam_line->seq;
        my $read = CracTools::ChimCT::Read->new(id => $sam_line->qname,
                                                         seq => $sam_line->getOriginalSeq, 
                                                         pos_junction => $splice->{pos}, 
                                                         sam_line => $sam_line,
                                                       );

        _processChimera($chimera,$read,$sam_line);
      }
    }

    # If there is a pairedChimera we add it to the overlap structure
    if (defined $sam_line->pairedChimera() &&
        defined $sam_line->isClassified('duplicated') && $sam_line->isClassified('duplicated') == 0 &&
        defined $sam_line->isClassified('multiple') && $sam_line->isClassified('multiple') == 0 &&
        defined $sam_line->isPairedClassified('duplicated') && $sam_line->isPairedClassified('duplicated') == 0 &&
        defined $sam_line->isPairedClassified('multiple') && $sam_line->isPairedClassified('multiple') == 0) {
      my ($chr1,$pos1,$strand1,$chr2,$pos2,$strand2) = $sam_line->pairedChimera();
      # Reverse strand2 (Paired-end protocol)
      $strand2 = -$strand2;
      my $PE_chim = CracTools::ChimCT::Chimera->new($chr1,$pos1,$strand1,$chr2,$pos2,$strand2);
      # Because PE chimeras are only given for the first read of the pair
      # and since stranded protocol (by illumina) is designed in order to have
      # the good strand for the mate, we need to reverse the chimera
      $PE_chim->reverseChimera(); # Test reversing chimera for stranded protocol
      $paired_chimera_overlap_struct->addChimera($PE_chim);
      
    # If verify splice is "on" and this pair correspond to a splice
    # We always use the second read of the pair, which is flagged 'LAST_SEGMENT'
    # because in case of stranded protocol, this one give the rght orientation
    } elsif($verify_splice && $sam_line->rnext eq '=' && abs($sam_line->tlen) > $CracTools::ChimCT::Const::MAX_TEMPLATE_LENGTH && 
        $sam_line->isFlagged($CracTools::SAMReader::SAMline::flags{LAST_SEGMENT})) {
      my $strand = 1;
      $strand = -1 if $sam_line->isFlagged($CracTools::SAMReader::SAMline::flags{REVERSE_COMPLEMENTED});
      my $PE_chim = CracTools::ChimCT::Chimera->new($sam_line->chr,$sam_line->pos,$strand,$sam_line->chr,$sam_line->pnext,$strand);
      $paired_chimera_overlap_struct->addChimera($PE_chim);
    }
  }
}
$chimera_struct->nbReadsImported($nb_reads_import); # For normalization

=head1 ANALYZERS

The chimera pipeline is construct around a concept of "Analyzer". Each Anlayzer
process the chimeras extracted from the SAM file in order to give additional
information and to compute a score that will contribute to the chimera "Rank".
Using those different pieces of information, we can classify and order the
chimeras using this "confidence" rank.

Analyzers are described below.

=cut

# Array to store analyzers
my @analyzers;
sub addAnalyzer {
  my %analyzer = @_;
  push(@analyzers,\%analyzer);
}

=head2 ANNOTATION

Annotation is the first step of the chimeraPipeline. Annotation is performed using a GFF3 file provided as command line argument.
Such a file can be generated using C<buildGFF3FromEnsembl.pl> script of the CracTools-Core distribution.

The annotation analyzer aims to find the annotations (gene -> mRNA -> exon) of both chimera parts. We first look for Protein coding
transcript, then non-coding transcript then EST transcript when C<--est> GFF3 file provided.

Annotation analyzer will remove class 2 chimeras that are actually splices.

=cut

print STDERR "> Annotating chimeras\n";
# Annotation has already be perfomed when importing the chimeras from the SAM file
# we only have to set the weights for each chimeric class
addAnalyzer(obj => $annot_analyzer, 
            weights => {1 => 4, 
                        2 => 4, 
                        3 => 4, 
                        4 => 4},
          );

=head2 CRAC SCORE

CRAC SCORE analyzer takes the algorithmic score given by CRAC for each read that contains the chimera and integrates it in the chim_value.

Warning: this analyzer is only available for CRAC versions greater than (or equal to) 1.9.1.

=cut

#if(defined $sam_reader->getCracVersionNumber() && $sam_reader->getCracVersionNumber() ge '1.9.1') {
  print STDERR "> Integrating CRAC_Score\n";
  my $crac_score_analyzer = CracTools::ChimCT::Analyzer::CracScore->new(
    chimera_struct => $chimera_struct,
  );
  addAnalyzer(obj => $crac_score_analyzer, 
              weights => {1 => 0, 
                          2 => 0, 
                          3 => 0, 
                          4 => 0},
            );
#}

=head2 CLASSIFICATION

Analyze and score each chimeras. Close to 1, the output will be very sensitive. Close to 0, the output will be very specific but less sensisitive.

=cut

#if(defined $sam_reader->getCracVersionNumber() && $sam_reader->getCracVersionNumber() ge '1.9.1') {
  print STDERR "> Compute ChimScore\n";
  my $chim_classification_analyzer = CracTools::ChimCT::Analyzer::ChimScore->new(
    chimera_struct => $chimera_struct,
  );
  addAnalyzer(obj => $chim_classification_analyzer, 
              weights => {1 => 0, 
                          2 => 0, 
                          3 => 0, 
                          4 => 0},
            );
#}

=head2 GSNAP MAPPING

GSNAP Mapping analyzer will try to map chimeric reads with another mapping tool
(GSNAP) to discard false positives.

In order to use GSNAP Mapping you need to defined some values in the
configuration file, otherwise GSNAP will not be used.

  GSNAP_EXE '/usr/bin/gsnap'
  GSNAP_GENOME_DIRECTORY '/data/indexes/gsnap'
  GSNAP_GENOME_NAME 'GRCh37'
  GSNAP_NB_THREADS 2

=cut

if (defined $GSNAP_EXE && defined $GSNAP_GENOME_DIRECTORY && defined $GSNAP_GENOME_NAME) {
  print STDERR "> Mapping chimeras with gsnap\n";

  my $gsnap_analyzer = CracTools::ChimCT::Analyzer::GSNAPMapping->new(
    chimera_struct => $chimera_struct,
    keep_gsnap_output => $keep_gsnap_output,
    gsnap_softclip_threshold => $gsnap_softclip_threshold,
    gsnap_exe => $GSNAP_EXE,
    gsnap_genome_dir => $GSNAP_GENOME_DIRECTORY,
    gsnap_genome_name => $GSNAP_GENOME_NAME,
    gsnap_nb_threads => $GSNAP_NB_THREADS,
    tmp_dir => $tmp_dir,
  );
  addAnalyzer(obj => $gsnap_analyzer,
              weights => {1 => 2, 
                          2 => 0, 
                          3 => 1, 
                          4 => 1},
            );
} else {
  print STDERR "GSNAP Analyzer not activated because GSNAP configurations are missing in command-line arguments or in CracTools.cfg config file (see chimCT manual)\n";
}

=head2 PAIRED END COVERAGE

If you are using PE reads we expect to find a consistent Paired-end coverage
for the chimeras. This piece of information will be used to compute the C<chim_value>.

=cut

my $paired_analyzer;
if($paired_chimera_overlap_struct->nbChimeras > 0) {
  print STDERR "> Searching for paired-end chimeras\n";
  $paired_analyzer = CracTools::ChimCT::Analyzer::PairedEndChimeras->new(
    chimera_struct => $chimera_struct,
    paired_chimera_overlap_struct => $paired_chimera_overlap_struct,
    #spanning_reads_file => $spanning_reads_file,
  );
  addAnalyzer(obj => $paired_analyzer, 
              weights => {1 => 3, 
                          2 => 2, 
                          3 => 0, 
                          4 => 2},
            );
} else {
  print STDERR "PAIRED END COVERAGE Analyzer not activated because no XP field has been found in $sam_file (SAM) file. This is either due to Single-end reads or CRAC version used for mapping is < to v1.5.\n";
}

=head2 STRINGENT FLAGS

=cut

print STDERR "> Set stringent flags\n";
my $stringent_analyzer = CracTools::ChimCT::Analyzer::StringentTests->new(
  chimera_struct => $chimera_struct,
);
addAnalyzer(obj => $stringent_analyzer, 
            weights => {1 => 2, 
                        2 => 1, 
                        3 => 1, 
                        4 => 1}
          );

=head2 FUSION DISTANCE (for class 3 chimeras only)

Fusion distance in class 3 chimeras is an important factor to discrimate artefacts.

=cut
my $fusion_distance_analyzer = CracTools::ChimCT::Analyzer::FusionDistance->new(
  chimera_struct => $chimera_struct,
);
addAnalyzer(obj => $fusion_distance_analyzer,
            weights => {1 => 0,
                        2 => 0, 
                        3 => 2, 
                        4 => 0},
          );

=head2 PRIMERS DESIGN

=cut
my $primers_design_analyzer;
if($primers) {
  print STDERR "> Primers design\n";
  $primers_design_analyzer = CracTools::ChimCT::Analyzer::PrimersDesign->new(
    chimera_struct => $chimera_struct,
    sam_file => $sam_file,
  );
}

my $read_analyzer = CracTools::ChimCT::Analyzer::Read->new(
  chimera_struct => $chimera_struct,
  detailed_sam => $detailed_sam,
);

=head1 CLASSIFICATION & CHIM_VALUES

We define a chim_value for each chimera combining scores given by the
analyzers. Depending on the chimera class, weights are applied for each
analyzers (see table below).

=over

=item B<                 > | B<Class 1> | B<Class 2> | B<Class 3> | B<Class 4> |

=item ------------------+---------+---------+---------+---------|

=item Annotation        |   xxxx  |   xxxx  |   xxxx  |   xxxx  |

=item GSNAP Mapping     |     xx  |         |      x  |      x  |

=item PE coverage       |    xxx  |     xx  |         |     xx  |

=item Stringent flags   |     xx  |      x  |      x  |      x  |

=item Fusion distance   |         |         |     xx  |         |


=back

=cut

# Compute scores
print STDERR "> Computing scores\n";
my %comments;
foreach my $chim (values %{$chimera_struct->chimeras}) {
  my $score = 0;
  my $factor = 0;
  my @chimera_comments;
  foreach my $analyzer (@analyzers) {
    my $weight = $analyzer->{weights}{$chim->getClass};
    if($weight > 0) {
      my $analyzer_classification;
      my ($analyzer_score,$analyzer_comments) = $analyzer->{obj}->getScore($chim);
      push(@chimera_comments,$analyzer_comments) unless !defined $analyzer_comments;
      my $is_pseudogene=0; 
      foreach(@chimera_comments) {
        if($_=~/pseudogene/) {
         $is_pseudogene=1; 
        }
      }
      ($analyzer_classification,$analyzer_comments) = $analyzer->{obj}->getChimScore($chim);
      push(@chimera_comments,$analyzer_classification) unless !defined $analyzer_comments;

      $score += $analyzer_score * $weight;
      $factor += $weight;
    }
  }
  $comments{$chim->getKey} = join(",",@chimera_comments);
  $score = int($score/$factor + 0.5);
  $chim->score($score);
}


print STDERR "> Generate output\n";
my $output = CracTools::Output->new();

# Generate summary if --summary
if(defined $summary_file) {
  my $summary = $chimera_struct->getStats;
  open(SUM,">$summary_file") or croak("Cannot open $summary_file");
  print SUM $summary;
}

=head1 OUTPUT FORMAT

This is a description of the format used to output analysed chimeras. Each line correspond to a uniq chimera
identified and annotated by the chimeraPipeline. Chimeras are ordered by Score, then class, then number
of spanning reads.

This format is composed by 13 mandatory fields TAB-separeted. This is an home-made format, because there is
no standard format that is able to store chimeras coordinates and related informations.

=over

=item 1  B<Id>                            - A Uniq Id for each chimera. This id is composed by C<sample_name:chimera id>.

=item 2  B<Name>                          - Fusion genes names separated by three dashes ('---')

=item 3  B<Chr1>                          - Chromosome of the 5' part of the chimera

=item 4  B<Pos1>                          - Genomic positions of the 5' part of the chimera

=item 5  B<Strand1>                       - Genomic strand of the 5' part of the chimera. If sample is not C<--stranded>
                                            No assumption can be made about the strand

=item 6  B<Chr2>                          - Chromosome of the 3' part of the chimera. Same as I<Chr2>, unless it is a class 1 chimera (translocation).

=item 7  B<Pos2>                          - Genomic positions of the 3' part of the chimera

=item 8  B<Strand2>                       - Genomic strand of the 3' part of the chimera. If sample is not C<--stranded>
                                            No assumption can be made about the strand

=item 9  B<Chim_value>                    - Confidence value about chimera's positivity (empirically constructed)

=item 10 B<Spanning_junction_normalized>  - Spaning junction reads coverage (normalized per billion of reads). A spanning junction read is the read that contains
                                 the chimeric junction.

=item 11 B<Spanning_PE_normalized>        - Coverage of paired-end reads (normalized per billion of reads) that contains the chimeric junction in the non-sequenced part.

=item 12 B<Class>                         - Chimeric class from 1 to 4. (add more details)

=item 13 B<Comments>                      - Free comments about the chimera. This field try to explain textualy the "Rank" value given
                                            for the chimera.

=item 14 B<Others>                        - This last fields are dedicated to additional informations. They are based one the {Key='value'} paradigm.

=back

=cut

# Generate a very small summary
my $nb_chim = $chimera_struct->nbChimeras();
my $nb_span_junc = $chimera_struct->nbReads();
my $nb_span_PE;
my $short_summary = "Nb total of reads: $nb_reads_import\nNb chimeras: $nb_chim\nNb spanning junction reads: $nb_span_junc\n"; 
if(defined $paired_analyzer) {
  $nb_span_PE = $paired_analyzer->getNbPairedEndReads();
  $short_summary .= "Nb spanning PE reads: $nb_span_PE\n";
}

# Print headers in output
$output->printHeaders(version => $CracTools::ChimCT::VERSION, 
                      args => \@ARGV_copy,
                      summary => $short_summary);

# Print columns description
$output->printHeaderLine;
$output->printHeaderLine("Id",
                         "Name",
                         "Chr1",
                         "Pos1",
                         "Strand1",
                         "Chr2",
                         "Pos2",
                         "Strand2",
                         "Chim_value",
                         'Spanning_junction',
                         'Spanning_PE',
                         'Class',
                         'Comments',
                         'Others');

# Get Chimeras ordered by score
my $chimeras_sorted_array_ref = $chimera_struct->getChimerasOrdered('score','class','nb_reads');

# Open spanning-reads file if option --spanning-reads
my $span_reads_fh;
if(defined $spanning_reads_file) {
  open($span_reads_fh,">$spanning_reads_file.fa") or die ("Cannot open $spanning_reads_file");
}

foreach my $chimera (@{$chimeras_sorted_array_ref}) {

  # Print chimera line
  $output->printLine("$sample_name:".$chimera->getUniqId,
                     $annot_analyzer->getFusionGenes($chimera),
                     $chimera->chr1,
                     $chimera->pos1,
                     $chimera->strand1,
                     $chimera->chr2,
                     $chimera->pos2,
                     $chimera->strand2,
                     $chimera->score,
                     int($chimera->nbReads / $nb_reads_import * $CracTools::ChimCT::Const::NORMALIZATION_CONST + 0.5),
                     defined $paired_analyzer? int($paired_analyzer->getNbSpanningReads($chimera) / $nb_reads_import * $CracTools::ChimCT::Const::NORMALIZATION_CONST + 0.5): 'N/A',
                     $chimera->getClass,
                     $comments{$chimera->getKey},
                     $annot_analyzer->getOutput($chimera),
                     $read_analyzer->getOutput($chimera),
                     "Nb_spanning_reads=".$chimera->nbReads,
                     $paired_analyzer? "Nb_spanning_PE=".$paired_analyzer->getNbSpanningReads($chimera) : (),
                     $primers? $primers_design_analyzer->getOutput($chimera) : (),
                   );
  # Print chimera read sequences if filehandle defined
  if(defined $span_reads_fh && defined $chimera->reads) {
    foreach my $read (@{$chimera->reads}) {
      print $span_reads_fh ">chim_id=".$chimera->getUniqId.",read_id=".$read->id.",pos_junction=".$read->posJunction."\n".$read->seq."\n";
    }
  }
}

# Generate Path if --patch option
if(defined $patch_file) {
  #open(PATCH, ">$patch_file") or croak("Cannot open $patch_file");
  #print PATCH $chimera_struct->getPatch;
}

