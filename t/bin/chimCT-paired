#! /usr/bin/perl

=head1 NAME

chimCT - Extract, format, classify and annote chimeras identified by CRAC.

=head1 SYNOPSIS

chimCT -g file.gff -s file.sam -n sample_name > output.csv

=head1 DESCRIPTION

The chimera pipeline is a tool for both annotating and formating chimera
produced by CRAC software as well as computing a score of beauty for each
chimera and sort them using this criteria.

=cut

use strict;
use warnings;

use Pod::Usage;         # Printing pod documentation in terminal
use Getopt::Long;       # Get options
use Carp;               # Print warnings and die
use Data::Dumper;       # Debug
use Set::IntervalTree;

use CracTools::Output;
use CracTools::Config;
use CracTools::SAMReader;
use CracTools::Annotator;
use CracTools::ChimCT;
use CracTools::ChimCT::Const;
use CracTools::ChimCT::Structure;
use CracTools::ChimCT::Analyzer::Annotation;
use CracTools::ChimCT::Analyzer::GSNAPMapping;
use CracTools::ChimCT::Analyzer::StringentTests;
use CracTools::ChimCT::Analyzer::PairedEndChimeras;
use CracTools::ChimCT::Analyzer::FusionDistance;
use CracTools::ChimCT::Analyzer::Read;

my ($man,$help);
my ($config_file,$gff_file,$est_file,$sam_file,$paired_end_chimeras_file,$summary_file,$new_splices_file,$ig_file,$patch_file,$spanning_reads_file); # Files
my ($is_stranded,$detailed,$detailed_sam,$sample_name,$keep_ig); # Options
my ($GSNAP_EXE,$GSNAP_GENOME_DIRECTORY,$GSNAP_GENOME_NAME); # GSNAP conf var

# Copy arguments before extring them
my @ARGV_copy = @ARGV;

GetOptions( "stranded"                  => \$is_stranded,
            "n|sample=s"                => \$sample_name,
            "g|gff=s"                   => \$gff_file,
            "est=s"                     => \$est_file,
            "s|sam=s"                   => \$sam_file,
            "conf=s"                    => \$config_file,
#            "detailed-sam"              => \$detailed_sam,
            "detailed"                  => \$detailed,
            "keep-ig"                   => \$keep_ig,
            "patch=s"                   => \$patch_file,
#            "paired-end-chimeras=s"     => \$paired_end_chimeras_file,
#            "ig=s"                      => \$ig_file,
#            "new-splices=s"             => \$new_splices_file,
            "summary=s"                 => \$summary_file,
#            "spanning-reads=s"          => \$spanning_reads_file,
#            "gsnap-exe=s"               => \$GSNAP_EXE,
#            "gsnap-genome-directory=s"  => \$GSNAP_GENOME_DIRECTORY,
#            "gsnap-genome-name=s"       => \$GSNAP_GENOME_NAME,
            "man"                       => \$man,
            "help"                      => \$help,
        ) or pod2usage(-verbose => 1);

pod2usage(-verbose => 1)  if ($help);
pod2usage(-verbose => 2)  if ($man);

# Open configuration file
CracTools::Config::LoadConfig($config_file);

$gff_file = CracTools::Config::getConfVar('ANNOTATION_GFF') unless defined $gff_file;

# Maximum distance between overlaping paired-end reads to be conserded as similar
my $max_overlapping_distance = 5000;

# Check mandatory arguments
if(!defined $gff_file || !defined $sam_file || !defined $sample_name) {
  print STDERR "Missing mandatory argument(s)\n";
  pod2usage(-verbose => 1);
}

# Create a sam reader object to parse crac command line arguments
my $sam_reader = CracTools::SAMReader->new($sam_file);

# Get stranded option from crac command line arguments
$is_stranded = 0;
if(!defined $is_stranded && $sam_reader->hasCracOption('stranded')) {
  $is_stranded = 1;
  print STDERR "Option --stranded activated (found in crac command line arguments)\n";
}

my $sam_it = $sam_reader->iteratorFile('IGNORE_HEADERS');
my $annotator = CracTools::Annotator->new($gff_file);
my %chimeras;
my %interval_trees;

while (my ($line,$line_number) = $sam_it->()) {

  # XP:Z:chimera:3|1,110772547:X|1,44215347
  my($loc1,$loc2) = $line =~ /XP:Z:chimera:([^:]+):([^:]+)\s/;
  my($paired_uniq,$paired_dupl,$paired_mult) = $line =~ /XP:loc:([^:]+):([^:]+):([^:]+)\s/;
  if(defined $loc2 & defined $paired_mult) {
    my ($chr1,$pos1,$strand1) = CracTools::SAMReader::SAMline::expandCracLoc($loc1);
    my ($chr2,$pos2,$strand2) = CracTools::SAMReader::SAMline::expandCracLoc($loc2);
    # Reverse strand2 (Paired-end protocol)
    $strand2 = -$strand2;

    # Create chimera object
    my $sam_line = CracTools::SAMReader::SAMline->new($line);
    next if $sam_line->isClassified('duplicated');
    next if $sam_line->isClassified('multiple');
    #next if $paired_uniq != 1;
    next if $paired_dupl != 0;
    next if $paired_mult != 0;
    my $chim = CracTools::ChimCT::Chimera->new($chr1,$pos1,$strand1,$chr2,$pos2,$strand2);
    my $read = CracTools::ChimCT::Read->new(id => $sam_line->qname,seq => $sam_line->seq);
    $chim->addRead($read);

    # CLASS 1 CHIMERAS
    if($chim->getClass == 1) {
      # TODO use KDTreee to find the closest match
      # IF NOT STRANDED LOOK FOR REVERSE CHIMERA
      my $key1 = $chim->chr1."@".$chim->strand1;
      my $key2 = $chim->chr2."@".$chim->strand2;
      if(!defined $interval_trees{class1}{$key1}{$key2}) {
        $interval_trees{class1}{$key1}{$key2} = ();
      }

      my ($closest_candidate_chimera,$closest_candidate_distance);

      foreach my $candidate_chimera (@{$interval_trees{class1}{$key1}{$key2}}) {
        my $dist = abs($candidate_chimera->pos1 - $chim->pos1) + abs($candidate_chimera->pos2 - $chim->pos2);
        if(!defined $closest_candidate_distance || $dist < $closest_candidate_distance) {
          $closest_candidate_chimera = $candidate_chimera;
          $closest_candidate_distance = $dist;
        }
      }

      # If not stranded try to look for reversed chimeric coordinates
      if(!$is_stranded) {
        my $reversed_key1 = $chim->chr2."@".-$chim->strand2;
        my $reversed_key2 = $chim->chr1."@".-$chim->strand1;
        if(!defined $interval_trees{class1}{$reversed_key1}{$reversed_key2}) {
          $interval_trees{class1}{$reversed_key1}{$reversed_key2} = ();
        }
        foreach my $candidate_chimera (@{$interval_trees{class1}{$reversed_key1}{$reversed_key2}}) {
          my $dist = abs($candidate_chimera->pos1 - $chim->pos2) + abs($candidate_chimera->pos2 - $chim->pos1);
          if(!defined $closest_candidate_distance || $dist < $closest_candidate_distance) {
            $closest_candidate_chimera = $candidate_chimera;
            $closest_candidate_distance = $dist;
          }
        }
      }

      if(defined $closest_candidate_distance && $closest_candidate_distance <= $max_overlapping_distance) {
        $chimeras{$closest_candidate_chimera->getKey}{count}++;
      } else {
        $chimeras{$chim->getKey}{chimera} = $chim;
        $chimeras{$chim->getKey}{count} = 1;
        push(@{$interval_trees{class1}{$key1}{$key2}},$chim);
      }
    }
    # CLASS 2 CHIMERAS
    elsif($chim->getClass == 2) {
      # When not stranded always reverse chimeras to get forward first
      if(!$is_stranded && $chim->strand1 eq -1) {
        $chim->reverseChimera();
      }

      #print $loc1,"\t",$loc2,"\n";
      #sleep 1;

      # Step 1: check annotation in order to remove splices
      my $tag_length = 20;
      my ($start1,$end1,$start2,$end2);
      if($strand1 eq 1) {
        $start1 = $chim->pos1 - $tag_length;
        $end1 = $chim->pos1;
        $start2 = $chim->pos2;
        $end2 = $chim->pos2 + $tag_length;
      } else {
        $start1 = $chim->pos1;
        $end1 = $chim->pos1 + $tag_length;
        $end2 = $chim->pos2;
        $start2 = $chim->pos2 - $tag_length;
      }
      if($annotator->foundSameGene($chim->chr1,$start1,$end1,$start2,$end2,$chim->strand1)) {
        next;
      } elsif (!$is_stranded && $annotator->foundSameGene($chim->chr1,$start1,$end1,$start2,$end2,$chim->strand1*-1)) {
        next;
      }

      # Step 2: check for similar chimeric alignement
      # Create interval tree for this chromosome if its not already done
      if(!defined $interval_trees{class2}{$chim->chr1}{$chim->strand1}) {
        $interval_trees{class2}{$chim->chr1}{$chim->strand1} = Set::IntervalTree->new;
      }
      # Check if we already have PE reads that cover this chimera
      #print "$pos1\t$pos2\n"; sleep 1;
      my $hits;
      if($chim->strand1 eq 1) {
        $hits = $interval_trees{class2}{$chim->chr1}{$chim->strand1}->fetch($chim->pos1,$chim->pos2);
      } else {
        $hits = $interval_trees{class2}{$chim->chr1}{$chim->strand1}->fetch($chim->pos2,$chim->pos1);
      }

      my ($closest_overlapping_chimera,$closest_overlapping_distance) = getClosestOverlappingChimera($chim,$hits);

      if(defined $closest_overlapping_distance && $closest_overlapping_distance <= $max_overlapping_distance) {
        $chimeras{$closest_overlapping_chimera->getKey}{count}++;
      } else {
        $chimeras{$chim->getKey}{chimera} = $chim;
        $chimeras{$chim->getKey}{count} = 1;
        if($chim->strand1 eq 1) {
          $interval_trees{class2}{$chim->chr1}{$chim->strand1}->insert($chim,$chim->pos1,$chim->pos2);
        } else {
          $interval_trees{class2}{$chim->chr1}{$chim->strand1}->insert($chim,$chim->pos2,$chim->pos1);
        }
      }
    }
    # CLASS 3 CHIMERAS
    elsif($chim->getClass == 3) {  
      # When not stranded always reverse chimeras to get forward first
      if(!$is_stranded && $chim->strand1 eq -1) {
        $chim->reverseChimera();
      }
      # Check for similar chimeric alignement
      # Create interval tree for this chromosome if its not already done
      if(!defined $interval_trees{class3}{$chim->chr1}{$chim->strand1}) {
        $interval_trees{class3}{$chim->chr1}{$chim->strand1} = Set::IntervalTree->new;
      }
      # Check if we already have PE reads that cover this chimera
      #print "$pos1\t$pos2\n"; sleep 1;
      my $hits;
      if($chim->strand1 eq 1) {
        $hits = $interval_trees{class3}{$chim->chr1}{$chim->strand1}->fetch($chim->pos2,$chim->pos1);
      } else {
        $hits = $interval_trees{class3}{$chim->chr1}{$chim->strand1}->fetch($chim->pos1,$chim->pos2);
      }

      my ($closest_overlapping_chimera,$closest_overlapping_distance) = getClosestOverlappingChimera($chim,$hits);

      if(defined $closest_overlapping_distance && $closest_overlapping_distance <= $max_overlapping_distance) {
        $chimeras{$closest_overlapping_chimera->getKey}{count}++;
      } else {
        $chimeras{$chim->getKey}{chimera} = $chim;
        $chimeras{$chim->getKey}{count} = 1;
        if($chim->strand1 eq 1) {
          $interval_trees{class3}{$chim->chr1}{$chim->strand1}->insert($chim,$chim->pos2,$chim->pos1);
        } else {
          $interval_trees{class3}{$chim->chr1}{$chim->strand1}->insert($chim,$chim->pos1,$chim->pos2);
        }
      }
    }
    # CLASS 4 CHIMERAS
    elsif($chim->getClass == 4) {
      # TODO Check case when class 4 is a class 3 as well
      # When not stranded always reverse chimeras to get forward first
      if(!$is_stranded && $chim->strand1 eq -1) {
        $chim->reverseChimera();
      }
      # Check for similar chimeric alignement
      # Create interval tree for this chromosome if its not already done
      if(!defined $interval_trees{class4}{$chim->chr1}{$chim->strand1}) {
        $interval_trees{class4}{$chim->chr1}{$chim->strand1} = Set::IntervalTree->new;
      }
      # Check if we already have PE reads that cover this chimera
      #print "$pos1\t$pos2\n"; sleep 1;
      my $hits;
      if($chim->strand1 eq 1) {
        $hits = $interval_trees{class4}{$chim->chr1}{$chim->strand1}->fetch($chim->pos1,$chim->pos2);
      } else {
        $hits = $interval_trees{class4}{$chim->chr1}{$chim->strand1}->fetch($chim->pos2,$chim->pos1);
      }

      my ($closest_overlapping_chimera,$closest_overlapping_distance) = getClosestOverlappingChimera($chim,$hits);

      if(defined $closest_overlapping_distance && $closest_overlapping_distance <= $max_overlapping_distance) {
        $chimeras{$closest_overlapping_chimera->getKey}{count}++;
      } else {
        $chimeras{$chim->getKey}{chimera} = $chim;
        $chimeras{$chim->getKey}{count} = 1;
        if($chim->strand1 eq 1) {
          $interval_trees{class4}{$chim->chr1}{$chim->strand1}->insert($chim,$chim->pos1,$chim->pos2);
        } else {
          $interval_trees{class4}{$chim->chr1}{$chim->strand1}->insert($chim,$chim->pos2,$chim->pos1);
        }
      }
    }
  }
}
my $chimera_struct = CracTools::ChimCT::Structure->new();
foreach my $key (keys %chimeras) {
  $chimera_struct->addChimera($chimeras{$key}{chimera});
}

my $annot_analyzer = CracTools::ChimCT::Analyzer::Annotation->new(
  chimera_struct => $chimera_struct,
  gff_file => $gff_file,
  est_file => $est_file,
  keep_ig => $keep_ig,
  is_stranded => $is_stranded,
);

my $read_analyzer = CracTools::ChimCT::Analyzer::Read->new(
  chimera_struct => $chimera_struct,
  detailed_sam => $detailed_sam,
);

my $output = CracTools::Output->new();
my @chimeras_keys_sorted = sort {
  $chimeras{$b}{count} <=> $chimeras{$a}{count} ||
  $chimeras{$a}{chimera}->getClass <=> $chimeras{$b}{chimera}->getClass
} keys $chimera_struct->chimeras;
#my $chimeras_sorted_array_ref = $chimera_struct->getChimerasOrdered('score','class','nb_reads');
foreach my $chim_key (@chimeras_keys_sorted) {
  my $chimera = $chimera_struct->getChimera($chim_key);
#  my $chimera = $chimeras{$key}{chimera};
  $output->printLine("$sample_name:P".$chimera->getUniqId,
                     $annot_analyzer->getFusionGenes($chimera),
                     $chimera->chr1,
                     $chimera->pos1,
                     $chimera->strand1,
                     $chimera->chr2,
                     $chimera->pos2,
                     $chimera->strand2,
                     $chimera->score,
                     0,
                     $chimeras{$chimera->getKey}{count},
                     $chimera->getClass,
                     $detailed? $annot_analyzer->getOutput($chimera) : (),
                     $detailed? $read_analyzer->getOutput($chimera) : (),
                   );
}

##############" FUNCTIONS ###################"
#
sub getClosestOverlappingChimera {
  my ($reference_chimera,$overlapping_chimeras) = @_;
  my $closest_overlapping_chimera;
  my $closest_overlapping_distance;
  foreach my $overlapping_chimera (@$overlapping_chimeras) {
    my $dist = abs($overlapping_chimera->pos1 - $reference_chimera->pos1) + abs($overlapping_chimera->pos2 - $reference_chimera->pos2);
    #print STDERR $dist,"\n";
    if(!defined $closest_overlapping_distance || $dist < $closest_overlapping_distance) {
      $closest_overlapping_chimera = $overlapping_chimera;
      $closest_overlapping_distance = $dist;
    }
  }
  return($closest_overlapping_chimera,$closest_overlapping_distance);
}
